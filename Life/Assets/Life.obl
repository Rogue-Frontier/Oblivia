{
    print:Console/WriteLine
    Life:class {
        width:i4 height:i4 grid:Grid.bit
        mod(n:i4 max:i4):
            (%: (<: n 0) ?+ (+:n max) ?- n max)
        at(x:i4 y:i4):
            grid(mod .| [x:width y:height] | i4)
        get(x:i4 y:i4):
            at(x y)/Get()
        set(x:i4 y:i4 b:bit):
            at(x y)/Set.b
        new(width:i4 height:i4): Life {
            {width height} := ^^,
            grid := Grid.bit/ctor(width height)
            debug()
        }
        debug(): {
            print *| cat *| [
                ["width: " width],
                ["height: " height]
            ]
        }
        activeCount:0
        txt: StrBuild/ctor()
        update(): {
            activeCount := 0
            g:get
            txt/Clear()
            ɩheight | ?(y:i4) {
                ɩwidth | ?(x:i4) {
                    w:(-:x 1) n:(+:y 1) e:(+:x 1) s:(-:y 1)
                    c:count(g.|[
                        w:n x:n e:n 
                        w:y     e:y 
                        w:s x:s e:s 
                    ] yes)
                    active:
                        g(x y) ..
                        _??((<:c 2)∨(>:c 3)??(no _), (=:c 3)??(yes _))
                    #   _ ?+
                    #       (<:c 2)∨(>:c 3) ?+ no ?- _ ?-
                    #       (=:c 3) ?+ yes ?- _
                    set(x y active)
                    activeCount := active??((+:_ 1) _)
                    str_append(txt active??("+" "-"))
                }

                # active ?+ "+" ?- "-"
                # active ??("+" "-")

                str_append(txt newline)
            }
            print*cat["active: " activeCount]
        }
    }
    main(args:str): i4* {
        life:Life/new(32 32)
        print*life/grid[:i4 0 0]/Get()
        ɩ(life/width) | ?(x:i4):ɩ(life/height) | ?(y:i4):life/set(x y rand_bool())
        count:1 prevCount:0 run:yes
        Console/Clear()
        run ?++ {
            life/update()
            prevCount := count
            count := life/activeCount

            # Assign and return prev value
            # prevCount <- count <- life/activeCount

            run := neq(count prevCount)
            # idea: auto-match abbrev e.g. Console/SetCurPos
            Console/{
                SetCursorPosition(0 0)
                Write* life/txt/ToString()
            }
        }
        ^: 0
    }
}
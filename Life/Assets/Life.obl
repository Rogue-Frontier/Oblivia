{
    Life: class {
        width:int height:int
        grid: Grid.bool
        adj(n:int max:int):modi(lt(n 0) ?+ addi(n max) ?- n max)
        GetPointer(x:int y:int):array_at(grid adj.|[(x width),(y height)]|:int?(i)i)    
        GetCell(x:int y:int):GetPointer(x y)/Get!
        SetCell(x:int y:int b:bool):GetPointer(x y)/Set.b
        new(width:int height:int): Life {
            (width height):=^^(width height)
            grid:=Grid.bool/ctor(width height)
            debug!
        }
        debug!: {
            print*cat["width: " width]
            print*cat["height: " height]
        }
        activeCount:0
        txt: StringBuilder/ctor!
        update!: {
            activeCount:=0
            g: GetCell
            txt/Clear!
            range(0 height) | ?(y:int) {
                range(0 width) | ?(x:int) {
                    w:subi(x 1) n:addi(y 1) e:addi(x 1) s:subi(y 1)
                    c: count(g.|[
                        (w n),(x n),(e n),
                        (w y),      (e y),
                        (w s),(x s),(e s),
                    ] true)
                    active:g(x y)
                    active:=
                        _ ?+ {
                            lt(c 2) ?+ false ?-
                            gt(c 3) ?+ false ?- _
                        } ?- {
                            eq(c 3) ?+ true ?- _
                        }
                    SetCell(x y active)
                    activeCount:=active ?+ addi(_ 1) ?- _
                    str_append(txt active ?+ "+" ?- "-")
                }
                str_append(txt newline)
            }
            print*cat["active: " activeCount]
        }
    }
    main(args: string): int* {
        life:Life/new(32 32)
        print*array_at(life/grid, [:int 0 0])/Get!
        range(0 life/width) | ?(x:int) range(0 life/height) | ?(y:int)
            life/SetCell(x y rand_bool!)
        count:1 prevCount:0 run:true
        Console/Clear!
        run?*{ 
            life/update!
            prevCount := count
            count := life/activeCount
            run := neq(count prevCount)
            Console/SetCursorPosition(0 0)
            print*str*life/txt
        }
        ^: 0
    }
}
{
	dict:[
		
		"addi(<lhs> <rhs>)"								:	"<lhs> + <rhs>"
		"subi(<lhs> <rhs>)"								:	"<lhs> - <rhs>"
		"divi(<lhs> <rhs>)"								:	"<lhs> // <rhs>"
		"divf(<lhs> <rhs>)"								:	"<lhs> / <rhs>"
		"muli(<lhs> <rhs>)"								:	"<lhs> * <rhs>"
		"subi(0 <lhs>)"									:	"-<lhs>"
		"<name>: var"									:	"var <name>"
		"<name>: const(<val>)"							:	"def <name> = <val>"
		"<name>:[<items>]"								:	"var <name> = [<items>]"
		"<name>:Grid(<type> <width> <height>)"			:	"var <name>[<width> <height>] of <type>"
		"for(<name> <start> <end>) { <body> }"		:	"for <name>:Int32 = <start> to <end> do <body> end"
		"<name>: ?(<par>) <body>"						:   "function <name>(<arg>) do <body> end"
		"<cond> ?+ <yes> ?- <cond2> ?+ <yes> ?- <no>"	:	"if <cond> do <yes> else if <cond2> do <yes> else <no>"
		"<cond> ?+ <yes> ?- <no>"						:	"if <cond> do <yes> else do <no> end"
		"<cond> ?+ <yes>"								:	"if <cond> do <yes> end"
		"i4"											:	"Int32"
		"<name>: val(<body>)"							:	"const <name> = <body>"
		"<name>: [<items>]"								:	"var <name> = [<items>]"
		#"<name>: <body>"								:	"var <name> = <body>"
	]
	alpha:		any*ch_arr."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"
	misc:		any*ch_arr.":?+-"
	l_paren:	any*ch_arr."("
	r_paren:	any*ch_arr.")"
	l_square:	any*ch_arr."["
	r_square:	any*ch_arr."]"
	l_curly:	any*ch_arr."{"
	r_curly:	any*ch_arr."}"
	l_angle:	any*ch_arr."<"
	r_angle:	any*ch_arr.">"
	quote:		any*ch_arr."\""
	space:		any*ch_arr." \t\r\n"
	Capture: class {
		good:no
		items: List.obj/ctor()
		len:0
		write(): {
			s:""
			items | ?(p){
				s := append(_ p/text)
			}
			^: s
		}
		fmt(s:""):{
			items | ?(p){
				p = CaptureStr:c ?+ {
					#print(cat[c/name "=" c/text])
					s := s/Replace(c/name c/text)
				}
			}
			^: s
		}
	}
	CaptureStr: class {
		expr: no
		text: str
		name: str
		len: 'text/Length
	}
	Matcher: class {
		parts: List.obj/ctor()
		match(other:StrDex start:0):{
			good:yes
			run:yes
			ind_l:start
			ind_r:0
			result: Capture{}
			matchAll: no
			matchNode: CaptureStr
			and[run lt(ind_l other/len)] ?% {
				(other/src.ind_l() = space) ?+ {
					#print."SPACE"
					ind_l := other/getEnd.ind_l
				} ?- {
					eq(ind_r parts/Count) ?+ {
						run := no
					} ?- {
						p:parts.ind_r(),
						(p = MatchStr:s) ?+ {
							lhs:other/src/Substring(ind_l s/len)
							#print(cat["LHS    " lhs "\nEXPECT " s/src])
							not(lhs/Equals(s/src)) ?+ {
								matchAll ?+ {
									term: other/getTerm.ind_l
									matchNode/{
										text := append(_ cat[" " term])
									}
									ind_l := addi(_ term/Length)
									#print(cat["capture more " lhs])
								} ?- {
									ind_l := 0
									#print."NO MATCH"
									good := no
									run := no
								}
							} ?- {
								#print."MATCH"
								result/items/Add* CaptureStr {
									name := lhs
									text := lhs
								}
								ind_l := addi(_ s/len)
								ind_r := addi(_ 1)
							}
						} ?- (p = MatchExp:e) ?+ {
							lhs:other/getTerm(ind_l)
							#print(cat["MATCH LHS    " lhs "\nEXPECT " e/name])
							item:CaptureStr{
								expr := yes
								text := lhs
								name := e/name
								#print(cat["capture " lhs])
							}
							result/items/Add*item
							e/{
								matchAll := all
								matchAll ?+ {
									#print."capture more"
									matchNode := item
								}
							}
							ind_l := addi(_ lhs/Length)
							ind_r := addi(_ 1)
						}					
					}
				}
			}
			#print*ind_r
			good := and[_ eq(ind_r parts/Count)]
			result/{good := ^^good len := subi(ind_l start)}
			^:result
		}
		parse(s:str): Matcher/new(Lexer/new(s)/read())
		new(from:StrDex): Matcher {
			i:0
			inc():{i := addi(_ 1)}
			lt(i from/src/Length) ?% {
				from/getChar.i ?{
					space: {
						i := from/getEnd.i
						#print."space"
					}
					any(l_paren r_paren l_square r_square l_curly r_curly): {
						parts/Add*MatchStr{ src := from/src/Substring(i 1) }
						inc()
						#print._
					}
					l_angle: {
						#print."TERM"
						parts/Add* MatchExp { all := yes name:= from/getTerm.i }
						i := from/getEnd.i
						#print._
					}
					default: {
						term: from/getTerm.i
						parts/Add*MatchStr{ src := term }
						i := from/getEnd.i
						#print.term
					}
				}
			}
		}
	}
	MatchStr: class {
		src: str
		len: 'src/Length
	}
	MatchExp: class {
		all: yes
		name:str
	}
	StrDex: class {
		src: str
		end: Array(i4 1)
		getEnd(i:i4): end.i()
		getChar(i:i4): src.i()
		getTerm(i:i4): src/Substring(i subi(getEnd.i i))
		len: 'src/Length
	}
	print:Console/WriteLine
	main:?(){
		matchers: dict | ?(from to) (Matcher/parse*from to)
		#m1: Lexer/lex("NEIGHBOR_Y: [subi(1) subi(1) subi(1) 0 0 1 1 1]")
		m1: Lexer/lex("
GRID_SIZE_X: val(divi(500 1727))
GRID_SIZE_Y: val(divi(300 839))
NEIGHBOR_X: [subi(1) 0 1 subi(1) 1 subi(1) 0 1]
NEIGHBOR_Y: [subi(1) subi(1) subi(1) 0 0 1 1 1]
gridData: Grid(i4 GRID_SIZE_X GRID_SIZE_Y)

for(x 0 subi(GRID_SIZE_X 1)) {
	for(y 0 subi(GRID_SIZE_Y 1)) {
		gridData(x y) = random(0 1)
	}
}


gridCtrl: UI/create(\"canvasGrid\", {
	color:\"#00cc58\"
	background: \"Neutral_Paper\",
	data: gridData
})

		")
		result:""

		ind:0
		run():{
			bestLen:i4/MaxValue
			bestCap:Capture
			bestFmt:str
			matchers | ?(from to) {
				cap: from/match(m1 ind)
				cap/good ?+ {
					#print*cap/fmt(to)
					lt(cap/len bestLen)
					
					#(bestLen = i4/MaxValue)
					
					?+ {
						bestLen := cap/len
						bestCap := cap
						bestFmt := to
					}
				}
			}
			not(eq(bestLen 0)) ?+ {
				ind := addi(_ bestLen)
				result := cat[_ "\n" bestCap/fmt(bestFmt)]
			} ?- lt(ind m1/src/Length) ?+ {
				c:m1/src/Substring(ind 1)
				#print.c
				result := cat[_ c]
				ind := addi(_ 1)
			}
			print*result
		}
		range(0 7) | ?(i) run()
		print.result
		/*
		m1: Lexer/lex("divi(1 2)")
		m2: Matcher/parse("divi(<lhs> <rhs>)")
		cap: m2/match.m1
		print*cap/fmt("<lhs> // <rhs>")

		m1: Lexer/lex("[1 2 3 4]")
		m2: Matcher/parse("[<items>]")
		cap: m2/match.m1
		print*cap/fmt("array(<items>)")
		
		m1: Lexer/lex("NEIGHBOR_Y: [subi(1) subi(1) subi(1) 0 0 1 1 1]")
		m2: Matcher/parse("<name>:[<items>]")
		cap: m2/match.m1
		print*cap/fmt("var <name> = [<items>]")
		*/
	}
	Lexer: class {
		src:str
		i:		0
		inc():	{i := addi(_ 1)}
		cur:	'src.i()
		good:	'lt(i src/Length)
		end:	Array(i4 1)
		read_name(): {
			start:i inc(),
			(good ?+ (cur=alpha) ?- no) ?% {
				arr_set(end, [:i4 start], i)
				inc()
			}
			arr_set(end, [:i4 start], i),
			#print(cat["name " start " " i])
		}
		read_paren(): {
			start:i inc(),
			(good ?+ not(cur=r_paren) ?- no) ?% step()
			inc()
			arr_set(end, [:i4 start], i),
			#print(cat["paren " start " " i])
		}
		read_square(): {
			start:i inc(),
			(good ?+ not(cur=r_square) ?- no) ?% step()
			inc()
			arr_set(end, [:i4 start], i),
			#print(cat["square " start " " i])
		}
		read_curly(): {
			start:i inc(),
			(good ?+ not(cur=r_curly) ?- no) ?% step()
			inc()
			arr_set(end, [:i4 start], i),
			#print(cat["curly " start " " i])
		}
		read_angle(): {
			start:i inc(),
			(good ?+ not(cur=r_angle) ?- no) ?% step()
			inc()
			arr_set(end, [:i4 start], i),
			#print(cat["angle " start " " i])
		}
		read_quote(): {
			start:i inc(),
			(good ?+ not(cur=quote) ?- no) ?% step()
			inc()
			arr_set(end, [:i4 start], i),
			#print(cat["quote " start " " i])
		}
		read_space(): {
			start:i inc(),
			(good ?+ (cur=space) ?- no) ?% {
				arr_set(end, [:i4 start], i)
				inc()
			}
			arr_set(end, [:i4 start], i)
			#print(cat["space " start " " i])
		}
		step():
			cur ?{
				alpha:		read_name()
				l_paren:	read_paren()
				l_square:	read_square()
				l_curly:	read_curly()
				l_angle:	read_angle()
				quote:		read_quote()
				space:		read_space()
				default:	{
					start:i
					inc()
					arr_set(end, [:i4 start], i)
				}
			}
		read():{
			end := arr_mk(i4 src/Length)
			good ?% step()
			#print."DONE"
			^: StrDex{ (src end) := ^^^^/(src end) }
		}

		new(s:str): Lexer { src := s }

		lex(s:str): Lexer/new(s)/read()

	}
}
{
	print:Console/WriteLine
	main:?(){
		parser:Parser{
			src := File/ReadAllText("Example.oml")
		}
		ret*parser/ParseExpr()
	}
	Parser: class {
		spaces:any*ch_arr*" \t\r\n"
		chr:parse_char
		err:magic()
		src:str
		ind:i4(0)
		valid:get* lt(ind src/Length)
		cur:get* valid ?+ src.ind() ?- err
		inc: ?(){ ind := addi(ind 1) }
		ParseExpr: ?(lhs:""): {
			result: obj
			print.cur
			active:yes

			parts: deconstruct(
				(active result),

			
			)
			

			active ?%
				cur ?{
					chr*"{":{
						result := ParseStruct.lhs
						active := no
						}
					chr*"\"":{
						result := ParseString()
						active := no
						}
					spaces:{
						print."space"
						inc()
					}
					err:{
						result := err
						active := no
					}
					default:{
						sym:ParseSymbol()
						result := ParseExpr(sym)
						active := no
					}
				}
			^:result
		}
		ParseStruct: ?(tag:"") {
			inc()
			result:OmlStruct{}
			content:List.object/ctor!
			result/keys."content" := content
			Do:label
			cur ?{
				chr*"}":{
					inc()
				}
				chr*"\"":{
					str: ParseString()
					cur ?{
						chr.":":{
							inc()
							result/keys(str) := ParseExpr()
						}
					}
					go*Done
				}
				chr*"{":{
					content/Add*ParseStruct()
					go*Done
				}
				spaces:{
					inc()
					print*"space"
					go*Done
				}
				default:{
					key: ParseSymbol()
					cur ?{
						chr*":":{
							inc()
							result/keys.key := ParseExpr()
						}
						_:{
							content/Add*key
						}
					}
					go*Done
				}
			}
			^:result
		}
		ParseSymbol: ?():{
			result:""
			Do:label
			cur ?{
				any*ch_arr(":{ \t\r\n\""):{
					print."space"
					(result/Length = 0) ?+ { ^^^:err }
				}
				err:{^^:err}
				#autoret(err)
				default:{
					result := append_ch(_ cur)
					inc()
					go*Do
				}
			}
			^:result
		}
		ParseString: ?(){
			inc()
			result:""
			Do:label
			cur ?{
				chr."\"":{
					inc()
				}
				default:{
					result := append(_ cur)
					inc()
					go*Do
				}
			}
			^:result
		}
	}
	OmlStruct: class {
		keys: Dict(str obj)/ctor()
	}
}